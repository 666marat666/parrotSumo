{
  "name": "jimp",
  "version": "0.1.4",
  "description": "An image processing library written entirely in JavaScript (i.e. zero external or native dependencies).",
  "main": "jimp.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "image",
    "processing",
    "manipulation",
    "png",
    "jpg",
    "jpeg",
    "resize",
    "scale",
    "crop"
  ],
  "author": {
    "name": "Oliver Moran",
    "email": "oliver.moran@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "pngjs": "~0.4.0",
    "jpeg-js": "0.0.4",
    "mime": "~1.2.11",
    "node-bitmap": "0.0.1",
    "stream-to-buffer": "~0.1.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/oliver-moran/jimp.git"
  },
  "bugs": {
    "url": "https://github.com/oliver-moran/jimp/issues"
  },
  "readme": "# Jimp #\n\nThe \"JavaScript Image Manipulation Program\" :-)\n\nAn image processing library written entirely in JavaScript for Node, with zero external or native dependencies.\n\nExample usage:\n\n    var Jimp = require(\"jimp\");\n\n    // open a file called \"lenna.png\"\n    var lenna = new Jimp(\"lenna.png\", function () {\n        this.resize(220, 220) // resize\n            .write(\"lenna-small.png\") // save\n            .quality(60) // set JPEG quality\n            .write(\"lenna-small.jpg\") // save as JPEG\n            .greyscale() // set greyscale\n            .write(\"lena-small-bw.png\") // save again\n            .crop(80, 100, 80, 50) // crop\n            .write(\"lena-small-bw-cropped.png\"); // save again\n    });\n\n## Methods ##\n\nThe Jimp constructor takes two arugments, the path to a JPEG or PNG image and an optional call back for when the image is parsed:\n\n    var image = new Jimp(\"./path/to/image.jpg\", function () {\n        // ready\n    });\n\nAlternatively, the Jimp constructor can take a Buffer object containing the image data and the string MIME type:\n\n    var image = new Jimp(data, \"image/png\", function () {\n        // ready\n    });\n\nOnce the callback has fired the following methods can be called on the image:\n\n    image.crop( x, y, w, h ); // crop to the given region\n    image.invert(); // invert the image colours\n    image.flip( horz, vert); // flip the image horizontally or vertically\n    image.gaussian( r ); // Gaussian blur the image by r pixels (VERY slow)\n    image.blur( r ); // fast blur the image by r pixels\n    image.greyscale(); // remove colour from the image\n    image.sepia(); // apply a sepia wash to the image\n    image.opacity( f ); // apply an opacity of 0-1 to the image\n    image.resize( w, h ); // resize the image\n    image.scale( f ); // scale the image by the factor f\n    image.rotate( deg ); // rotate the image clockwise by a number of degrees (rounded to multiples of 90)\n\n(Contributions of more methods are welcome!)\n\nThe image can be written to disk in JPEG or PNG format using:\n\n    image.write( path, cb ); // callback will be fired when write is successful\n\nThe quality of saved JPEGs can be set with:\n\n    image.quality( n ); // set the quality of saved JPEG, 0 - 100\n\nA Buffer of the image (for storage in a database) in can to got using:\n\n    image.getBuffer( mime, cb ); // callback wil be fired with the Buffer as the first argument\n\n## Properties ##\n\nFor convenience, upported MIME types are available as static properties:\n\n    Jimp.MIME_PNG; // \"image/png\"\n    Jimp.MIME_JPEG; // \"image/jpeg\"\n\nThese can be used with the Jimp construtor and getBuffer method.\n\n## Advanced ##\n\nThe library enables low-level manipulation of images in memory through the bitmap property of each Jimp object:\n\n    image.bitmap.data; // a buffer of the raw bitmap data\n    image.bitmap.width; // the width of the image\n    image.bitmap.height // the height of the image\n\nThis can be manipulated directory, but remember: garbage in, garbage out.\n\nA helper method is available to scan a region of the bitmap:\n\n    image.scan(x, y, w, h, cb); // scan a given region of the bitmap and call cb on every pixel\n    \nExample usage:\n\n    image.scan(0, 0, image.bitmap.width, image.bitmap.height, function (x, y, idx) {\n        // x, y is the position of this pixel on the image\n        // idx is the position start position of this rgba tuple in the bitmap buffer\n        \n        var red = this.bitmap.data[idx];\n        var green = this.bitmap.data[idx+1];\n        var blue = this.bitmap.data[idx+2];\n        var alpha = this.bitmap.data[idx+3];\n        \n        // rgba values run from 0 - 255\n        // e.g. this.bitmap.data[idx] = 0; // removes red from this pixel\n    });\n\n## License ##\n\nJimp is licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "jimp@0.1.4",
  "dist": {
    "shasum": "b3676ad342c678e3f481d5289cdd293043d578ab"
  },
  "_from": "jimp@^0.1.4",
  "_resolved": "https://registry.npmjs.org/jimp/-/jimp-0.1.4.tgz"
}
